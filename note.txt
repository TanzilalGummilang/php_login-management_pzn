# Controller {
  ## menerima request dari user dan menyampaikan ke model dan service
  ## lalu mengembalikan response ke user dgn tampilan dari view 
}

# Domain = representasi dari table di database
# Repository = semua aksi yg berhubungan dgn database

# Service = semua bisnis logic
# Model = data value parameter dan return value dari Service (bisa juga disebut Data Transfer Object (DTO))

# UserController {
  ## function register = untuk tampilan awal registrasi
  ## function postRegister = aksi register (perlu service dan model)
}

# SessionRepository {
  ## langkah-langkah {
    1. Domain {
      - buat Domain representasi dari session
    }
    2. SessionRepository {
      - create/insert data session
      - delete session (setelah logout)
      - cek session, select sesssion berdasarkan id
      - delete semua session utk unittest
      - buat connection ke database dan constructornya
    }
    3. buat unit test nya
  }
}

# SessionService {
  ## mengikuti format session {
    - setelah login session dibuat
    - setelah logout session dihapus
    - kadang2 kita ingin tau session saat ini
  }
  ## jadi yg akan dibuat adalah {
    - create/buat session
    - destroy/hapus session
    - current = session saat ini
    - constructor utk SessionRepository
    - pake cookie utk simpan data session id (session php agak bermasalah (materi php web))
    - unit test nya, bikin dummy setcookie karena ini sama seperti menambah header (error cannot modify header), penjelasan error tsb ada di eps 261 Unit Test User Registation Controller dimulai menit ke 6:02
  }
  ## setelah delete cookie dari database, cookie perlu diubah lagi, cookie tidak otomatis hilang
  ## pada unit test, function setUp(), function deleteAll() urutannya jgn ketuker, alasannya karena di SessionRepository ada foreign key ke userRepository, kondisi ini berlaku utk ke depannya juga.
}

# Login Session {
  ## UserController {
    - setelah login, kita akan redirect ke halaman dasboardnya, tapi session service belum dipanggil, jadi diclass ini kita panggil SessionService nya
    - postLogin: setelah login, sebelum redirect, setcookie/create terlebih dahulu
  }
  ## HomeController {
    - jika selesai login maka akan di redirect kesini,
    - maka perlu beberapa pengecekan terlebih dahulu disini, jika belum pernah login berarti masih akun guest (home/index), jika pernah login maka tampilkan dashboard (home/dashboard)
  }
  ## bikin HomeControllerTest
  ## update UserControllerTest {
    - error 'intrgrity constraint bla..bla..' karena ada data di tabel session
    - perlu menambahkan SessionRepository
    - setelah menambahkan lalu di running, akan terjadi error di testLoginSuccess (error cannot modify header bla..bla..)
    - maka perlu dummy setcookie seperti di SessionService
  }
}

# Logout {
  ## UserController {
    - bikin function logout, isinya destroy cookie, lalu redirect ke halaman home atau login juga boleh 
  }
  ## public/index.php {
    - tambah route logout, methodnya GET karena pake link
  }
}

# Middleware {
  ## pake Middleware karena utk mengecek, jika user sudah login maka tidak boleh login kembali atau registrasi kembali, harus logout terlebih dahulu, dan akan diredirect ke dashboard jika user tetap memaksa login atau registrasi kembali melalui url. begitupun jika user belum login tidak boleh logout.
  ## MustLoginMiddleware {
    - artinya harus login terlebih dahulu
    - jika ada pemaksaan masuk tanpa login, maka akan di redirect ke index awal atau hal login 
  }
  ## MustNotLoginMiddleware {
    - maksudnya keadaan sudah login
    - jika ada pemaksaan pake fitur yg diharuskan logout terlebih dahulu misalnya registrasi atau login kembali, maka akan di redirect ke hal dashboard
  }
  ## public/index.php {
    - tambah Middleware di tiap route yg diperlukan
  }
}

# User Profile Update Repository {
  # UserRepository {
    - bikin function update berparameter User dan return User
    - function update ini akan dipakai utk update profile dan update password
  }
  # UserRepositoryTest {
    - update UserRepositoryTest
    - bikin testUpdate
    - perlu SessionRepository agar tidak error
  }
}

# User Profile Update Service {
  # UserService {
    - bikin function updateProfile
    - bikin model request dan return valuenya, utk parameter dan return value dari function updateProfile
    - bikin function validation nya
    - function updateProfile pake database transactional {
      1. masukin validasi dulu
      2. pake try catch
      3. isi try: beginTransaction, findById, update, commitTransaction, return response
      4. isi catch: exception, rollbackTransaction, throw exception
    }
  }
  # UserServiceTest {
    - testUpdateSuccess, testUpdateValidationError, testUpdateNotFound
  }
}

# User Profile Update Controller {
  ## UserController {
    - bikin function updateProfile dan postUpdateProfile
  }
  ## updateProfile {
      - isinya render
      - panggil sessionService->current sebelum render utk ambil data user $model, datanya yaitu 'title => ...', 'user => id, name'
  }
  ## bikin View/User/profile.php {
    - copas dari template
    - copas alert message
    - id: disabled, value dari $model 
    - name: value dari $model
  }
  ## public/index {
    - tambah: route '/users/profile', method 'get', function 'updateProfile', 'MustLoginMiddleware'
    - tambah: route '/users/profile', method 'post', function 'postUpdateProfile', 'MustLoginMiddleware' (dilakukan setelah beres postUpdateProfile)
  }
  ## postUpdateProfile {
    - bikin objek dari UserProfileUpdateRequest, masukan ke variable $UserProfileUpdateRequest
    - instansiasi {
      -- id: ambil dari current(), maka panggil dulu sessionService->current(), karena jika pake post seperti yg name maka akan bisa rubah user orang ?? coba cari tau penjelasan dan buktinya
      -- name: ambil dari name di form update profile dengan method post
    }
    - panggil updateProfile(), tapi pake try catch {
      -- try: isinya userService->updateProfie, lalu redirect ke dashboard
      -- catch: isinya exception, lalu kembalikan ke halaman yg sekarang (update profile) dan selipkan exception->getMessage() nya
    }
  }
}

# unit test User Profile Update Controller, UserControllerTest {
  ## testUpdateProfile {
    - bikin user dulu lalu save
    - bikin session dulu lalu save, karena harus login dulu
    - masukan id ke session cookie
    - panggil updateProfile()
    - test expectOutputRegex() nya, yaitu kata-kata yg harus muncul di tampilan update profile
  }
  ## testPostUpdateProfileSuccess {
    - bikin user dulu lalu save
    - bikin session dulu lalu save, karena harus login dulu
    - masukan id ke session cookie
    - masukan nama yg baru yg akan di update pake method post
    - panggil postUpdateProfile()
    - test expectOutputRegex(), nya yaitu harus redirect dashboard
    - lalu cek ke db pake findById
    - test assertEquals() namanya
  }
  ## testPostUpdateProfileValidationError {
    - bikin user dulu lalu save
    - bikin session dulu lalu save, karena harus login dulu
    - masukan id ke session cookie
    - masukan nama string kosong (yg membuat gagal) yg akan di update pake method post
    - panggil postUpdateProfile()
    - test expectOutputRegex() nya, termasuk yg id and name cannot blank
  }
}

# User Password Update Service {
  ## UserService {
    - updatePassword() {
      -- perlu request dan response modelnya, 
      request: id, old password, new password, boleh null semua
      response: User
      -- validasi dulu
      -- pake database transaction try catch
      -- try: begin, findById dimasukan ke variable $user, cek usernya kalo gaada throw new validasiexception, cek password request dgn password di database jika tidak sama throw new validasiexception, instansiasi password baru ke userRepository, update(user), commit, bikin objek dimasukan ke variable $response, user dgn password baru dimasukan ke response->user, return responsenya.
      -- catch: pake Exception, rollback, throw exception
    }
    - validateUserPasswordUpdateRequest() {
      -- parameternya request yg diatas tadi
      -- isinya hampir sama kaya validasi validasi sebelumnya
    }
  }
}

# unit test User Password Update Service, UserServiceTest {
  ## testUpdatePasswordSuccess {
    - bikin user lalu save
    - bikin objek requestnya, lalu instansiasi
    - panggil updatePassword()
    - panggil findById() dimasukan ke $result
    - assertTrue: pastikan harus sama password baru dgn password yg di db
  }
  ## testUpdatePasswordValidationError
  {
    - bikin objek requestnya, lalu instansiasi dgn string kosong
    - panggil updatePassword()
    - expectException: ValidationException. ini ditaro di awal function test ini 
  }
  ## testUpdatePasswordWrongOldPassword
  {
    - bikin user lalu save
    - bikin objek requestnya, lalu instansiasi dan salahkan password lama nya
    - panggil updatePassword()
    - expectException: ValidationException. ini ditaro di awal function test ini 
  }
  ## testUpdatePasswordNotFound
  {
    - bikin objek requestnya, lalu instansiasi
    - panggil updatePassword()
    - expectException: ValidationException. ini ditaro di awal function test ini 
  }
}

# User Password Update Controller {
  ## updatePassword() {
    - ini utk tampilan halaman update password
    - pake view::render, tujuannya ke user/password, kirim data $modelnya dan ambil datanya dari current()
    - bikin file View User passwordnya nya, copas dari template, dan copas alert message nya
    - tambah: value id nya ambil dari $model, old dan new password gaperlu
    - tambahin routenya sekalian aja sm route postUpdatePassword nya juga
  }
  ## postUpdatePassword() {
    - ini utk aksi change passwordnya
    - pake current(), agar memastikan sudah login dan ambil datanya
    - bikin objek UserPasswordUpdateRequest dimasukan ke $request. dan 
    instansiasi id = user->id, oldpassword = post oldpassword, newpassword = post newpassword
    - try catch.
    try: updatePassword(), viewredirect ke dashboard
    catch: validationexception, viewrender nya sama seperti yg updatePassword() tapi ada selipan errornya  
  }
}

# unit test User Password Update Controller, UserControllerTest {
  ## testUpdatePassword() {
    - bikin user dan save, bikin session dan save, masukan session id ke cookie
    - panggil updatePassword()
    - expectOutputRegex: password, id, tanzilal
  }
  ## testPostUpdatePasswordSuccess() {
    - bikin user dan save, bikin session dan save, masukan session id ke cookie
    - masukan old dan new password dgn method $_post
    - panggil postUpdatePassword()
    - expectOutputRegex: location /
    - verifikasi apakah password sudah berubah, pake findById, masukan ke $result
    - test pake assertTrue
  }
  ## testPostUpdatePasswordValidationError() {
    - bikin user dan save, bikin session dan save, masukan session id ke cookie
    - masukan 'string kosong' old dan new password dgn method $_post
    - panggil postUpdatePassword()
    - expectOutputRegex: password, id, tanzilal, string validasiexception nya
  }
  ## testPostUpdatePasswordWrongOldPassword() {
    - bikin user dan save, bikin session dan save, masukan session id ke cookie
    - masukan 'old password yg salah' dan new password dgn method $_post
    - panggil postUpdatePassword()
    - expectOutputRegex: password, id, tanzilal, string validasiexception nya
  }

}