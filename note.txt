# Controller {
  ## menerima request dari user dan menyampaikan ke model dan service
  ## lalu mengembalikan response ke user dgn tampilan dari view 
}

# Domain = representasi dari table di database
# Repository = semua aksi yg berhubungan dgn database

# Service = semua bisnis logic
# Model = data value parameter dan return value dari Service (bisa juga disebut Data Transfer Object (DTO))

# UserController {
  ## function register = untuk tampilan awal registrasi
  ## function postRegister = aksi register (perlu service dan model)
}

# SessionRepository {
  ## langkah-langkah {
    1. Domain {
      - buat Domain representasi dari session
    }
    2. SessionRepository {
      - create/insert data session
      - delete session (setelah logout)
      - cek session, select sesssion berdasarkan id
      - delete semua session utk unittest
      - buat connection ke database dan constructornya
    }
    3. buat unit test nya
  }
}

# SessionService {
  ## mengikuti format session {
    - setelah login session dibuat
    - setelah logout session dihapus
    - kadang2 kita ingin tau session saat ini
  }
  ## jadi yg akan dibuat adalah {
    - create/buat session
    - destroy/hapus session
    - current = session saat ini
    - constructor utk SessionRepository
    - pake cookie utk simpan data session id (session php agak bermasalah (materi php web))
    - unit test nya, bikin dummy setcookie karena ini sama seperti menambah header (error cannot modify header), penjelasan error tsb ada di eps 261 Unit Test User Registation Controller dimulai menit ke 6:02
  }
  ## setelah delete cookie dari database, cookie perlu diubah lagi, cookie tidak otomatis hilang
  ## pada unit test, function setUp(), function deleteAll() urutannya jgn ketuker, alasannya karena di SessionRepository ada foreign key ke userRepository, kondisi ini berlaku utk ke depannya juga.
}

# Login Session {
  ## UserController {
    - setelah login, kita akan redirect ke halaman dasboardnya, tapi session service belum dipanggil, jadi diclass ini kita panggil SessionService nya
    - postLogin: setelah login, sebelum redirect, setcookie/create terlebih dahulu
  }
  ## HomeController {
    - jika selesai login maka akan di redirect kesini,
    - maka perlu beberapa pengecekan terlebih dahulu disini, jika belum pernah login berarti masih akun guest (home/index), jika pernah login maka tampilkan dashboard (home/dashboard)
  }
  ## bikin HomeControllerTest
  ## update UserControllerTest {
    - error 'intrgrity constraint bla..bla..' karena ada data di tabel session
    - perlu menambahkan SessionRepository
    - setelah menambahkan lalu di running, akan terjadi error di testLoginSuccess (error cannot modify header bla..bla..)
    - maka perlu dummy setcookie seperti di SessionService
  }
}

# Logout {
  ## UserController {
    - bikin function logout, isinya destroy cookie, lalu redirect ke halaman home atau login juga boleh 
  }
  ## public/index.php {
    - tambah route logout, methodnya GET karena pake link
  }
}

# Middleware {
  ## pake Middleware karena utk mengecek, jika user sudah login maka tidak boleh login kembali atau registrasi kembali, harus logout terlebih dahulu, dan akan diredirect ke dashboard jika user tetap memaksa login atau registrasi kembali melalui url. begitupun jika user belum login tidak boleh logout.
  ## MustLoginMiddleware {
    - artinya harus login terlebih dahulu
    - jika ada pemaksaan masuk tanpa login, maka akan di redirect ke index awal atau hal login 
  }
  ## MustNotLoginMiddleware {
    - maksudnya keadaan sudah login
    - jika ada pemaksaan pake fitur yg diharuskan logout terlebih dahulu misalnya registrasi atau login kembali, maka akan di redirect ke hal dashboard
  }
  ## public/index.php {
    - tambah Middleware di tiap route yg diperlukan
  }
}

# User Profile Update Repository {
  # UserRepository {
    - bikin function update berparameter User dan return User
    - function update ini akan dipakai utk update profile dan update password
  }
  # UserRepositoryTest {
    - update UserRepositoryTest
    - bikin testUpdate
    - perlu SessionRepository agar tidak error
  }
}

# User Profile Update Service {
  # UserService {
    - bikin function updateProfile
    - bikin model request dan return valuenya, utk parameter dan return value dari function updateProfile
    - bikin function validation nya
    - function updateProfile pake database transactional {
      1. masukin validasi dulu
      2. pake try catch
      3. isi try: beginTransaction, findById, update, commitTransaction, return response
      4. isi catch: exception, rollbackTransaction, throw exception
    }
  }
  # UserServiceTest {
    - testUpdateSuccess, testUpdateValidationError, testUpdateNotFound
    - 
  }
}